<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC5652 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5652.xml">
<!ENTITY RFC2104 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2104.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3279 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3279.xml">
<!ENTITY RFC4055 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4055.xml">
<!ENTITY RFC4086 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4086.xml">
<!ENTITY RFC5480 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5480.xml">
<!ENTITY RFC5652 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5652.xml">
<!ENTITY RFC8017 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8017.xml">
<!-- <!ENTITY I-D.draft-ietf-lamps-pkix-shake SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml-ids/reference.I-D.draft-ietf-lamps-pkix-shake-00.xml"> -->
<!ENTITY I-D.draft-housley-lamps-cms-sha3-hash SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml-ids/reference.I-D.draft-housley-lamps-cms-sha3-hash-00.xml">
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-ietf-lamps-cms-shakes-01" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr="full3978" (probably old)
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->
	<front>
	  <title abbrev="SHAKEs in CMS">Use of the SHAKE One-way Hash Functions in the Cryptographic Message Syntax (CMS)</title>
	  <author fullname="Quynh Dang" initials="Q." surname="Dang">
	    <organization>NIST</organization>
	    <address><postal><street>100 Bureau Drive</street>
	    <street>Gaithersburg, MD 20899</street>
	    </postal>
	    <email>quynh.Dang@nist.gov</email>
	    </address>
	  </author>
      
	  <author fullname="Panos Kampanakis" initials="P." surname="Kampanakis">
	    <organization>Cisco Systems</organization>
	    <address><email>pkampana@cisco.com</email></address>
	  </author>
      
	  <date year="2018"/>
      <area>General</area>
      <workgroup>LAMPS WG</workgroup>
	  
	  <abstract>
	    <t>This document describes the conventions for using the SHAKE family of 
		hash functions with the Cryptographic Message Syntax (CMS).</t>
	  </abstract>
	</front>

	<middle>
	
    <section title="Change Log">
	  <t>[ EDNOTE: Remove this section before publication. ]</t>
      <t><list style="symbols"> 
	    <t>draft-ietf-lamps-cms-shake-01:
		  <list> 
		  <t></t>
		  <t></t>
		  <t></t>
		  <t></t>
	    </list></t>
  	    <t>draft-ietf-lamps-cms-shake-00:
		  <list> 
		  <t>Various updates to title and section names.</t>
		  <t>Content changes filling in text and references.</t>
	    </list></t>
	    <t>draft-dang-lamps-cms-shakes-hash-00:
		  <list> 
	      <t>Initial version</t>
	    </list></t>
	  </list></t>
    </section>
	
	<section title="Introduction" anchor="section-1">
	<t>The Cryptographic Message Syntax (CMS) <xref target="RFC5652"/> is used to 
	digitally sign, digest, authenticate, or encrypt arbitrary message contents. 
    This specification describes the use of the SHAKE128 and SHAKE256 
    specified in <xref target="SHA3"/> as new hash functions in CMS. In addition, 
    it describes the use of these functions with the RSASSA-PSS signature 
	algorithm <xref target="RFC8017"/> and the Elliptic Curve Digital Signature 
	Algorithm (ECDSA) <xref target="X9.62"/> with the CMS signed-data content type.</t>
    
    <!--  <section title="ASN.1" anchor="section-1.1">
	  <t>CMS values are generated using ASN.1 <xref target="ASN1-B"/>, using the Basic 
      Encoding Rules (BER) and the Distinguished Encoding Rules (DER)
      <xref target="ASN1-E"/>.</t>
      </section> -->
      
	<!--  <section title="Terminology" anchor="section-1.2"><t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in RFC 2119 <xref target="KEYWORDS"/>.</t>
	  </section> -->
	</section>

	<section title="Message Digest Algorithms" anchor="xofs">
      <t>The SHA-3 family of one-way hash functions is specified in 
	  <xref target="SHA3"/>, which defines two extendable-output functions, 
	  SHAKE128 and SHAKE256. Four other hash functions, SHA3-224, SHA3-256,
      SHA3-384, and SHA3-512 are also defined but are out of scope for this
      document. SHAKE is a variable length hash function. The output
      lengths, in bits, of the SHAKE hash functions are defined by the
      parameter d.  The corresponding collision and preimage resistance
      security levels for SHAKE128 and SHAKE256 are respectively
      min(d/2,128) and min(d,128) and min(d/2,256) and min(d,256). </t> 
	  
	  <!-- Commention out the below OIDs as they are no longer pertinent for the below public keys and sigs -->
	  <!-- The Object Identifiers (OIDs) for these two hash functions are defined in 
	  <xref target="shake-nist-oids"/> and are included here for convenience: 
  
  	<figure><artwork><![CDATA[
    id-shake128-len OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)
                     country(16) us(840) organization(1) gov(101) csor(3)
                     nistalgorithm(4) hashalgs(2) 17 }
					 
    id-shake128-len OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)
                     country(16) us(840) organization(1) gov(101) csor(3)
                     nistalgorithm(4) hashalgs(2) 18 }
  
    ShakeOutputLen ::= INTEGER -\- Output length in octets]]></artwork>
  	</figure>
  
     <t>When using the id-shake128-len id-shake256-len algorithm identifiers, 
	 the parameters MUST be present, and they MUST employ the ShakeOutputLen 
	 syntax that contains an encoded positive integer value at least 32 or 
	 64 respectively.</t> -->

	 <t>In CMS, digest algorithm identifiers are located in the SignedData 
	 digestAlgorithm field, the SignerInfo digestAlgorithm field, the 
	 DigestedData digestAlgorithm field, and the AuthenticatedData 
	 digestAlgorithm field.</t>
	  
	 <t>Digest values are located in the DigestedData field and the 
	 Message Digest authenticated attribute.  In addition, digest values 
     are input to signature algorithms.</t>

  	 <t>The SHAKEs can also be used as the mask generation function of the 
	 RSASSA-PSS signature algorithm. The mask generation function takes an 
	 octet string of variable length and a desired output length as input, 
	 and outputs an octet string of the desired length. To use a SHAKE as 
	 the mask generation function in RSASSA-PSS, this document defines it 
	 as part of the RSASSA-PSS identifier. </t> 
	 
	 <!-- The mask generation function used in RSASSA-PSS 
	 is defined in <xref target="RFC8017"/>, but we include it here as well 
	 for convenience:
     <t><figure><artwork><![CDATA[
    id-mgf1  OBJECT IDENTIFIER  ::=  { pkcs-1 8 }]]></artwork></figure></t>
  
     <t>The parameters field associated with id-mgf1 MUST have a
     hashAlgorithm value that identifies the hash used with MGF1. To use
     SHAKE as this hash, this parameter MUST be id-shake128-len or id-
     shake256-len as specified in <xref target="xofs" /> above. </t>    -->
    </section>
	  
	<section title="Signature Algorithms and Public Keys" anchor="section-3">
	  <t>This section specifies the conventions employed by CMS
      implementations that support the SHAKE one-way hash functions
      with the RSASSA-PSS signature algorithm <xref target="RFC8017"/> and
      the Elliptic Curve Digital Signature Algorithm (ECDSA) <xref target="X9.62"/> 
	  in the CMS signed-data content type.</t>
      
      <t>In CMS, signature algorithm identifiers are located in the SignerInfo
      signatureAlgorithm field of SignedData and countersignature attributes.
      Signature values are located in the SignerInfo signature field of SignedData and 
      countersignature attributes.</t>

	  <section title="RSASSA-PSS with SHAKEs" anchor="section-3.1"> 
        <t>The RSASSA-PSS signature algorithm identifier and its parameters are 
		specifed in <xref target="RFC4055"/>. This document adds two new algorithm 
		choices. The new signature algorithm identifiers are </t>
		<!-- <figure><artwork><![CDATA[
    id-RSASSA-PSS  OBJECT IDENTIFIER  ::=  { pkcs-1 10 }

    RSASSA-PSS-params  ::=  SEQUENCE  {
         hashAlgorithm      HashAlgorithm,
         maskGenAlgorithm   MaskGenAlgorithm,
         saltLength         INTEGER,
         trailerField       INTEGER }
]]></artwork></figure> -->
	        <t><figure><artwork><![CDATA[
  id-RSASSA-PSS-SHAKE128  OBJECT IDENTIFIER  ::=  { pkcs-1 w }
]]></artwork></figure></t>

	        <t><figure><artwork><![CDATA[
  id-RSASSA-PSS-SHAKE256  OBJECT IDENTIFIER  ::=  { pkcs-1 z }
   
  [ EDNOTE: "w" and "z" will be specified by NIST later. ]
]]></artwork></figure></t>
		   
		<t>The parameters for these identifiers MUST be absent. That is, the AlgorithmIdentifier 
		SHALL be a SEQUENCE of one component, the OID id-RSASSA-PSS-SHAKE128 or id-RSASSA-PSS-SHAKE256.</t>
        
		<t>In the identifiers above, SHAKE128 and SHAKE256 are respectively used as the hashAlgorithm 
		and the maskGenAlgorithm. The output-lengths of the hashAlgorithm are 32 and 64 bytes respectively. 	   
		The respective output length for the mask generation algorithm is (n - 264)/8 or (n - 520)/8 
		respectively, where n is the RSA modulus in bits. For example, when 
		RSA modulus n is 2048, the mask generation algorithm length will be 223 or 191. The saltLength is 
		32 or 64 bytes respectively for the SHAKE128 and SHA256 OIDs. Finally, the trailerField SHALL 
		be 1, which represents the trailer field with hexadecimal value 0xBC <xref target="RFC4055"/>.</t>
		   
		<t>The conventions for RSA public keys are as specified in 
		<xref target="RFC3279"/> and <xref target="RFC4055"/>. 
		<xref target="RFC3279"/> defines the following OID for RSA with 
		NULL parameters.</t>
		<t><figure><artwork><![CDATA[
   rsaEncryption OBJECT IDENTIFIER ::=  { pkcs-1 1}
]]></artwork></figure></t>

		<t>This document adds the corresponding RSASSA-PSS identifiers defined above. 
		When used as the public key identifier, the parameters MUST be absent. That is, 
		the public key identifier SHALL be a SEQUENCE of one component, the OID 
		id-RSASSA-PSS-SHAKE128 or id-RSASSA-PSS-SHAKE256. The details of the algorithms, 
		salt length and trailer are defined above.</t>
		
		<t>Regardless of what RSA algorithm identifier is used, the RSA public key, which 
		is composed of a modulus and a public exponent, MUST be encoded using the 
		RSAPublicKey type <xref target="RFC4055"/>. The output of this encoding is carried 
		in the subjectPublicKey. </t>
        <t><figure><artwork><![CDATA[
  RSAPublicKey ::= SEQUENCE {
        modulus INTEGER, -- n
        publicExponent INTEGER  -- e
  }
]]></artwork></figure></t>

		<t>Additionally, <xref target="RFC4055"/> adds the RSASSA-PSS OID and 
		parameters shown above as a public key identifier. The parameters may be either 
		absent or present when RSASSA-PSS OID is used as subject public key information. 	
		If id-RSASSA-PSS is used in the public key identifier with parameters, Section 3.3 of 
		<xref target="RFC4055"/> describes that the signature algorithm parameters MUST match the 
		parameters in the key structure algorithm identifier except the saltLength field. The 
		saltLength field in the signature parameters MUST be greater or equal to that in the key 
		parameters field. If the id-RSASSA-PSS parameters are NULL no further parameter validation 
		is necessary.</t>
   	  </section>

      <section title="ECDSA with SHAKEs" anchor="section-3.2">
	    <t>The Elliptic Curve Digital Signature Algorithm (ECDSA) is defined in 
	    <xref target="X9.62"/>. When ECDSA is used in conjunction with one of the SHAKE 
	    one-way hash functions, the object identifiers are:</t>
	    <figure><artwork><![CDATA[
     id-ecdsa-with-SHAKE128 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)
         us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) 3  x}
     
     id-ecdsa-with-SHAKE256 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)
         us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) 3  y} 
	
	 EDNOTE: x and y will be specified by NIST.
]]></artwork> </figure>
     
<!--   <figure><artwork><![CDATA[
   sigAlgs OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)
       us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) 3 }

   id-ecdsa-with-SHAKE128 ::= { sigAlgs x }

   id-ecdsa-with-SHAKE256 ::= { sigAlgs y }
   
Note: x and y will be specified by NIST.
]]></artwork> </figure> -->
		<t>When the id-ecdsa-with-SHAKE128 or id-ecdsa-with-SHAKE256, 
		algorithm identifier appears in the algorithm field, the encoding 
		MUST omit the parameters field. That is, the identifier SHALL 
		be a SEQUENCE of one component, the OID ecdsa-with-SHAKE128 
		or ecdsa-with-SHAKE256.</t>
        
	    <t>For simplicity and compliance with the ECDSA standard specification, 
	    the output size of the hash function must be explicitly determined. The 
	    ShakeOutputLen parameter of SHAKE128 or SHAKE256 MUST be 32 or 64 bytes 
	    respectively when it is used in ECDSA. </t>
        
        <t>When id-ecdsa-with-shake128 or id-ecdsa-with-shake256 are 
		used as the algorithm identitifier in the public key, the parameters MUST 
		be omitted. That is, the identifier SHALL be a SEQUENCE of one 
		component, the OID ecdsa-with-SHAKE128 or ecdsa-with-SHAKE256. 
		The conventions for ECDSA public key is specified in 
	    <xref target="RFC5480"/> in Section 2.1.1 and its syntax in Section 2.2. 
		We include it here for convenience: </t>
		<figure><artwork><![CDATA[
   id-ecPublicKey OBJECT IDENTIFIER ::= {
       iso(1) member-body(2) us(840) ansi-X9-62(10045) keyType(2) 1 }
	   
   ECParameters ::= CHOICE {
       namedCurve         OBJECT IDENTIFIER
       -- implicitCurve   NULL
       -- specifiedCurve  SpecifiedECDomain 
	   }
]]></artwork></figure>		
	    <t>The ECParameters associated with the ECDSA public key in the signers 
	    certificate SHALL apply to the verification of the signature.</t> 
	  </section>
	</section>

	<section title="Message Authentication Codes with SHAKEs" anchor="section-4">
	  <t>This section specifies the conventions employed by CMS 
	  implementations that support the KMAC specified in <xref target="SP800-185"/> 
	  as authentication code (MAC).</t>

	  <t> In CMS, KMAC algorithm identifiers are located in the AuthenticatedData 
	  macAlgorithm field. MAC values are located in the AuthenticatedData mac field.</t>

	  <t>The object identifiers for KMACs with SHAKE128 and SHAKE256 are:</t>
	  
	  <figure><artwork><![CDATA[
   id-KmacWithSHAKE128 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)
       us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) 2 m }

   id-KmacWithSHAKE256 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)
       us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) 2 n }

   EDNOTE: m and n will be specified by NIST.
]]></artwork></figure>
<!--       <figure><artwork><![CDATA[
   hashAlgs OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)
       us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) 2 }

   id-KmacWithSHAKE128 OBJECT IDENTIFIER ::= { x }

   id-KmacWithSHAKE256 OBJECT IDENTIFIER ::= { y }

   Note: x and y will be specified by NIST.
]]></artwork></figure> --> 

	  <t>When the id-KmacWithSHAKE128 or id-KmacWithSHAKE256 algorithm identifier 
	  is used, the parameters field MUST be absent; not NULL but absent.</t>
	  
	  <t>When calculating the KMAC output, the variable N is 0xD2B282C2, S 
	  is an empty string, and L, the integer representing the requested output 
	  length in bits, is 256 or 512 for KmacWithSHAKE128 or KmacWithSHAKE256 
	  respectively in this specification.</t>
	</section>
	
	<section title="Acknowledgement" anchor="ack">
	  <t>This document is based on Russ Housley's draft <xref target="I-D.housley-lamps-cms-sha3-hash"/> 
	  It replaces SHA3 hash functions by SHAKE128 and SHAKE256 as the LAMPS 
	  WG agreed.</t>
	</section>
	
    <section anchor="IANA" title="IANA Considerations">
	  <t>This document uses several new registries [ EDNOTE: Update here. ]</t>
    </section>

	<section title="Security Considerations" anchor="section-5">
	  <t>SHAKE128 and SHAKE256 are one-way extensible-output functions. Their 
	  output length depends on a required length of the consuming application.</t>
      
      <t>The SHAKEs are deterministic functions.  Like any other deterministic
      functions, executing each function with the same input multiple times
      will produce the same output.  Therefore, users should not expect
      unrelated outputs (with the same or different output lengths) from
      excuting a SHAKE function with the same input multiple times.</t>
	  
	  <t>Implementations must protect the signer's private key. Compromise of
      the signer's private key permits masquerade.</t>
      
	  <t>When more than two parties share the same message-authentication key,
      data origin authentication is not provided. Any party that knows the
      message-authentication key can compute a valid MAC, therefore the
      content could originate from any one of the parties.</t>
      
	  <t>Implementations must randomly generate message-authentication keys
      and one-time values, such as the k value when generating a ECDSA
      signature. In addition, the generation of public/private key pairs
      relies on random numbers. The use of inadequate pseudo-random
      number generators (PRNGs) to generate such cryptographic values can
      result in little or no security. The generation of quality random
      numbers is difficult. <xref target="RFC4086"/> offers important guidance 
	  in this area, and <xref target="SP800-90A"/> series provide acceptable 
      PRNGs.</t>
      
	  <t>Implementers should be aware that cryptographic algorithms may become
      weaker with time. As new cryptanalysis techniques are developed and
      computing performance improves, the work factor to break a particular
      cryptographic algorithm will reduce. Therefore, cryptographic
      algorithm implementations should be modular allowing new algorithms
      to be readily inserted. That is, implementers should be prepared to
      regularly update the set of algorithms in their implementations.</t>
    </section>

	</middle>

	<back>
	<references title="Normative References">
	  &RFC3279;
	  &RFC4055;
      &RFC5480;
	  &RFC5652;
	  &RFC8017;
	  <reference anchor="SHA3">
	    <front>
	      <title>SHA-3 Standard - Permutation-Based Hash and Extendable-Output Functions</title>
	      <author>
	        <organization>National Institute of Standards and Technology, U.S. Department of Commerce</organization>
	      </author>
	      <date month="August" year="2015"/>
	    </front>
	    <seriesInfo name="FIPS" value="PUB 202"/>
	  </reference>
      <reference anchor="SP800-185" target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-185.pdf">
        <front>
          <title>SHA-3 Derived Functions: cSHAKE, KMAC, TupleHash and ParallelHash. NIST SP 800-185</title>
          <author>
            <organization>National Institute of Standards and Technology</organization>
          </author>
          <date month="December" year="2016" />
        </front>
      </reference>
	  <!-- <reference anchor="ASN1-B"><front>
	  <title>Information technology - Abstract Syntax Notation One (ASN.1): Specification of basic notation</title>
	  <author>
	  <organization>ITU-T</organization>
	  </author>
	  <date year="2015"/>
	  </front>
	  <seriesInfo name="ITU-T" value="Recommendation X.680"/>
	  </reference> -->
	  <!-- <reference anchor="ASN1-E"><front>
	  <title>Information technology - ASN.1 encoding rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)</title>
	  <author>
	  <organization>ITU-T</organization>
	  </author>
	  <date year="2015"/>
	  </front>
	  <seriesInfo name="ITU-T" value="Recommendation X.690"/>
	  </reference> -->
	  <!-- <reference anchor="DSS"><front>
	  <title>Digital Signature Standard, version 4</title>
	  <author>
	  <organization>National Institute of Standards and Technology, U.S. Department of Commerce</organization>
	  </author>
	  <date year="2013"/>
	  </front>
	  <seriesInfo name="NIST" value="FIPS PUB 186-4"/>
	  </reference> -->
	</references>

	<references title="Informative References">
	  &RFC4086;
	  <!-- <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml-ids/reference.I-D.draft-ietf-lamps-pkix-shake-00.xml"?> -->
	  <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml-ids/reference.I-D.draft-housley-lamps-cms-sha3-hash-00.xml"?>
      <!--<reference anchor="shake-nist-oids" target="https://csrc.nist.gov/Projects/Computer-Security-Objects-Register/Algorithm-Registration">
        <front>
          <title>Computer Security Objects Register</title>
          <author>
            <organization>National Institute of Standards and Technology</organization>
          </author>
          <date month="October" year="2017" />
        </front>
      </reference> -->
      <reference anchor="X9.62">
        <front>
          <title>X9.62-2005 Public Key Cryptography for the Financial Services Industry: The Elliptic Curve Digital Signature Standard (ECDSA)</title>
          <author>
            <organization>American National Standard for Financial Services (ANSI)</organization>
          </author>
          <date month="November" year="2005" />
        </front>
      </reference>
      <reference anchor="SP800-90A" target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf">
        <front>
          <title>Recommendation for Random Number Generation Using Deterministic Random Bit Generators. NIST SP 800-90A</title>
          <author>
            <organization>National Institute of Standards and Technology</organization>
          </author>
          <date month="June" year="2015" />
        </front>
      </reference>
	</references>
	<section title="ASN.1 Module" anchor="section-a"><t>
    [EDNOTE: Update] </t>

	</section>

	</back>

</rfc>
	
