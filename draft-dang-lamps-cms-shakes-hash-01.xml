<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC5652 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5652.xml">
<!ENTITY RFC2104 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2104.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3279 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3279.xml">
<!ENTITY RFC4055 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4055.xml">
<!ENTITY RFC4086 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4086.xml">
<!ENTITY RFC5480 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5480.xml">
<!ENTITY RFC8017 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8017.xml">
<!ENTITY I-D.draft-ietf-lamps-pkix-shake SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml-ids/reference.I-D.draft-ietf-lamps-pkix-shake-00.xml">
<!ENTITY I-D.draft-housley-lamps-cms-sha3-hash SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml-ids/reference.I-D.draft-housley-lamps-cms-sha3-hash-00.xml">
]>
<rfc submissionType="IETF" docName="draft-dang-lamps-cms-shakes-hash-01.txt" category="std"><?rfc compact="yes"?>
	<?rfc text-list-symbols="o*+-"?>
	<?rfc subcompact="no"?>
	<?rfc sortrefs="yes"?>
	<?rfc symrefs="yes"?>
	<?rfc strict="yes"?>
	<front>
	  <title abbrev="SHAKEs in CMS">Use of the SHAKE One-way Hash Functions in the Cryptographic Message Syntax (CMS)</title>
	  <author fullname="Quynh Dang" initials="Q." surname="Dang">
	    <organization>NIST</organization>
	    <address><postal><street>100 Bureau Drive</street>
	    <street>Gaithersburg, MD 20899</street>
	    </postal>
	    <email>quynh.Dang@nist.gov</email>
	    </address>
	  </author>
      
	  <author fullname="Panos Kampanakis" initials="P." surname="Kampanakis">
	    <organization>Cisco Systems</organization>
	    <address><email>pkampana@cisco.com</email></address>
	  </author>
      
	  <date month="January" year="2018"/>
      <area>General</area>
      <workgroup>LAMPS WG</workgroup>
	  
	  <abstract>
	    <t>This document describes the conventions for using the SHAKE family of 
		hash functions with the Cryptographic Message Syntax (CMS).</t>
	  </abstract>
	</front>

	<middle>
	<section title="Introduction" anchor="section-1">
	<t>The Cryptographic Message Syntax (CMS) <xref target="CMS"/> is used to digitally 
    sign, digest, authenticate, or encrypt arbitrary message contents. 
    This specification describes the use of the SHAKE128 and SHAKE256 
    specified in <xref target="SHA3"/> as new hash function in CMS. In addition, 
    this specification describes the use of these one-way hash functions 
    with the RSASSA-PSS signature algorithm <xref target="RFC8017"/> and the
    Elliptic Curve Digital Signature Algorithm (ECDSA) <xref target="DSS"/> with the CMS
    signed-data content type.</t>
    
    <!--  <section title="ASN.1" anchor="section-1.1">
	  <t>CMS values are generated using ASN.1 <xref target="ASN1-B"/>, using the Basic 
      Encoding Rules (BER) and the Distinguished Encoding Rules (DER)
      <xref target="ASN1-E"/>.</t>
      </section> -->
      
	<!--  <section title="Terminology" anchor="section-1.2"><t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in RFC 2119 <xref target="KEYWORDS"/>.</t>
	  </section> -->
	</section>

	<section title="Message Digest Algorithms">
  	  <section title="One-way Extensible-Output-Function SHAKEs" anchor="xofs">
      <t>The SHA-3 family of one-way hash functions is specified in <xref target="SHA3"/>.
     In the SHA-3 family, two extendable-output functions, called SHAKE128
     and SHAKE256 are defined.  Four hash functions, SHA3-224, SHA3-256,
     SHA3-384, and SHA3-512 are also defined but are out of scope for this
     document. </t>
	 
	  <t>In CMS, Digest algorithm identifiers are located in the SignedData 
	  digestAlgorithms field, the SignerInfo digestAlgorithm field, the 
	  DigestedData digestAlgorithm field, and the AuthenticatedData 
	  digestAlgorithm field.</t>
	  
	  <t>Digest values are located in the DigestedData digest field and the 
	  Message Digest authenticated attribute.  In addition, digest values 
	  are input to signature algorithms.</t>
	 
	  <t>SHAKE is a variable length hash function. The output
     lengths, in bits, of the SHAKE hash functions is defined by the
     parameter d.  The corresponding collision and preimage resistance
     security levels for SHAKE128 and SHAKE256 are respectively
     min(d/2,128) and min(d,128) and min(d/2,256) and min(d,256). The
     Object Identifiers (OIDs) for these two hash functions are defined in 
	 <xref target="I-D.ietf-lamps-pkix-shake"/> [EDNOTE: Keep updating 
	 reference when as draft evolves and becomes RFC], but we include them 
	 here as well for convenience: </t>
  
  	<figure><artwork><![CDATA[
    id-shake128-len OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)
                     country(16) us(840) organization(1) gov(101) csor(3)
                     nistalgorithm(4) hashalgs(2) 17 }
					 
    id-shake128-len OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)
                     country(16) us(840) organization(1) gov(101) csor(3)
                     nistalgorithm(4) hashalgs(2) 18 }
  
    ShakeOutputLen ::= INTEGER -- Output length in octets]]></artwork>
  	</figure>
  
     <t>When using the id-shake128-len id-shake256-len algorithm identifiers, 
	 the parameters MUST be present, and they MUST employ the ShakeOutputLen 
	 syntax that contains an encoded positive integer value at least 32 or 
	 64 respectively.</t>
     </section>
  
     <section title="Mask Generation SHAKEs" anchor="section-3.1.1">
  	   <t>The RSASSA-PSS signature algorithm uses a mask generation function.
     A mask generation function takes an octet string of variable length
     and a desired output length as input, and outputs an octet string of
     the desired length.  The mask generation function used in RSASSA-PSS 
	 is defined in <xref target="RFC8017"/>, but we include it here as well 
	 for convenience:</t>
     <t><figure><artwork><![CDATA[
    id-mgf1  OBJECT IDENTIFIER  ::=  { pkcs-1 8 }]]></artwork></figure></t>
  
     <t>The parameters field associated with id-mgf1 MUST have a
     hashAlgorithm value that identifies the hash used with MGF1. To use
     SHAKE as this hash, this parameter MUST be id-shake128-len or id-
     shake256-len as specified in <xref target="xofs" /> above. </t>      
  	  </section>
    </section>
	  
	<section title="Signature Algorithms" anchor="section-3"><t>
   This section specifies the conventions employed by CMS
   implementations that support 2 SHAKE one-way hash functions
   with the RSASSA-PSS signature algorithm <xref target="RFC8017"/> and
   the Elliptic Curve Digital Signature Algorithm (ECDSA) <xref target="DSS"/> with the
   CMS signed-data content type.</t>

   <t>In CMS, signature algorithm identifiers are located in the SignerInfo
   signatureAlgorithm field of SignedData and countersignature attributes.
   Signature values are located in the SignerInfo signature field of SignedData and 
   countersignature attributes.</t>

	<section title="RSASSA-PSS with SHAKEs" anchor="section-3.1"> 
      <t>The RSASSA-PSS signature algorithm identifier and its parameters are
   specifed in <xref target="RFC4055"/>.</t>

	<figure><artwork><![CDATA[
   id-RSASSA-PSS  OBJECT IDENTIFIER  ::=  { pkcs-1 10 }

      RSASSA-PSS-params  ::=  SEQUENCE  {
            hashAlgorithm      HashAlgorithm,
            maskGenAlgorithm   MaskGenAlgorithm,
            saltLength         INTEGER,
            trailerField       INTEGER }
]]></artwork>
	</figure>
	  <t>This document adds two new hash algorithm choices and two new choices
      for mask generation functions.  These are the SHAKE128 and SHAKE256
      algorithm identifiers specified in <xref target="xofs" />.</t>

      <t>When SHAKE128 or SHAKE256 is used as the hashAlgorithm, it MUST also
      be used as the maskGenAlgorithm. </t>
      
      <t>When used as the hashAlgorithm, the SHAKE128 or SHAKE256 output-
      length must be either 32 or 64 bytes respectively.  In these cases,
      the parameters MUST be present, and they MUST employ the
      ShakeOutputLen syntax that contains an encoded positive integer value
      of 32 or 64 for id-shake128-len or id-shake256-len algorithm
      identifier respectively.</t>
      
      <t>When id-shake128-len or id-shake256-len algorithm identifier is used
      as the id-mfg1 maskGenAlgorithm parameter, the ShakeOutputLen
      paramater must be (n - 264)/8 or (n - 520)/8 respectively for
      SHAKE128 and SHAKE256, where n is the RSA modulus in bits. For example, when RSA modulus n is 2048, ShakeOutputLen must be 223 or 
      191 when id-shake128-len or id-shake256-len is are used respectively.</t>
      
      <t>The paramater saltLength MUST be 32 or 64 bytes respectively for the
      SHAKE128 and SHAKE256 OIDs.</t>
   </section>

   <section title="ECDSA with SHAKEs" anchor="section-3.2"><t>
   The Elliptic Curve Digital Signature Algorithm (ECDSA) is defined in
   <xref target="DSS"/>. When ECDSA is used in conjunction with one of the SHAKE one-
   way hash functions, the object identifiers are:</t>
   
   <figure><artwork><![CDATA[
   id-ecdsa-with-SHAKE128 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)
       us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) 3  x}

   id-ecdsa-with-SHAKE256 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)
       us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) 3  y}

Note: x and y will be specified by NIST.
]]></artwork> </figure>
   
<!--   <figure><artwork><![CDATA[
   sigAlgs OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)
       us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) 3 }

   id-ecdsa-with-SHAKE128 ::= { sigAlgs x }

   id-ecdsa-with-SHAKE256 ::= { sigAlgs y }
   
Note: x and y will be specified by NIST.
]]></artwork> </figure> -->
   <t>When using the id-ecdsa-with-SHAKE128 or id-ecdsa-with-SHAKE256
   algorithm identifier, the parameters field MUST be absent; not NULL but
   absent.</t>
   <t>For simplicity and compliance with the ECDSA standard specification, the output size of the hash function must be explicitly determined, the ShakeOutputLen of SHAKE128 or SHAKE256 is 32 or 64 bytes respectively when it is used in ECDSA</t>

	<t>
   The conventions for ECDSA public keys is as specified in <xref target="RFC5480"/>.
   The ECParameters associated with the ECDSA public key in the signers
   certificate SHALL apply to the verification of the signature.</t>

	<t>
   When signing, the ECDSA algorithm generates two values.  These values
   are commonly referred to as r and s.  To easily transfer these two
   values as one signature, they MUST be ASN.1 encoded using the ECDSA-
   Sig-Value defined in <xref target="RFC3279"/> and repeated here for convenience:</t>

	<figure><artwork><![CDATA[
   ECDSA-Sig-Value ::= SEQUENCE {
       r  INTEGER,
       s  INTEGER }
]]></artwork>
	</figure>
	</section>

	</section>

	<section title="Message Authentication Codes with SHAKEs" anchor="section-4"><t>
   This section specifies the conventions employed by CMS
   implementations that support the KMAC specified in [KMAC]
   as authentication code (MAC).</t>

	<t>
   KMAC algorithm identifiers are located in the AuthenticatedData
   macAlgorithm field.</t>

	<t>
   MAC values are located in the AuthenticatedData mac field.</t>

	<t><list style="hanging" hangIndent="-1"><t hangText="The object identifiers for KMACs with SHAKE128 and SHAKE256 are:">
	<vspace blankLines="0"/>
	</t>

	</list>
	</t>

	<figure><artwork><![CDATA[
   hashAlgs OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)
       us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) 2 }

   id-KmacWithSHAKE128 OBJECT IDENTIFIER ::= { x }

   id-KmacWithSHAKE256 OBJECT IDENTIFIER ::= { y }

   Note: x and y will be specified by NIST.
]]></artwork>
	</figure>
	<t>
   The variables N and S in this specification for KMAC are emply strings.
   L, an integer representing the requested output length in bits, is
   256 or 512 for KmacWithSHAKE128 or KmacWithSHAKE256 respectively
   in this specification.</t>

	<t>
   When the id-KmacWithSHAKE128 or id-KmacWithSHAKE256 algorithm identifier
   is used, the parameters field MUST be absent; not NULL but absent.</t>

	</section>
	
	<section title="Acknowledgement" anchor="ack">
	  <t>This document is based on Russ Housley's draft 
	  <xref target="I-D.housley-lamps-cms-sha3-hash"/> 
	  It replaces SHA3 hash functions by SHAKE128 and SHAKE256 as the LAMPS 
	  WG agreed.</t>
	</section>
	
    <section anchor="IANA" title="IANA Considerations">
	  <t>[ EDNOTE: Update here. ] </t>
    </section>

	<section title="Security Considerations" anchor="section-5">
	   <t>SHAKE128 and SHAKE256 are one-way extensible-output functions.  Their
   output length depends on a required length of the consumming
   application.

   The SHAKEs are deterministic functions.  Like any other deterministic
   functions, executing each function with the same input multiple times
   will produce the same output.  Therefore, users should not expect
   unrelated outputs (with the same or different output lengths) from
   excuting a SHAKE function with the same input multiple times.</t>
	   <t>
   Implementations must protect the signer's private key. Compromise of
   the signer's private key permits masquerade.</t>

	<t>
   When more than two parties share the same message-authentication key,
   data origin authentication is not provided. Any party that knows the
   message-authentication key can compute a valid MAC, therefore the
   content could originate from any one of the parties.</t>

	<t>
   Implementations must randomly generate message-authentication keys
   and one-time values, such as the k value when generating a ECDSA
   signature. In addition, the generation of public/private key pairs
   relies on random numbers. The use of inadequate pseudo-random
   number generators (PRNGs) to generate such cryptographic values can
   result in little or no security. The generation of quality random
   numbers is difficult. RFC 4086 <xref target="RANDOM"/> offers important guidance in
   this area, and NIST SP 800-90 [SP800-90s] series provide acceptable
   PRNGs.</t>

	<t>
   Implementers should be aware that cryptographic algorithms may become
   weaker with time. As new cryptanalysis techniques are developed and
   computing performance improves, the work factor to break a particular
   cryptographic algorithm will reduce. Therefore, cryptographic
   algorithm implementations should be modular allowing new algorithms
   to be readily inserted. That is, implementers should be prepared to
   regularly update the set of algorithms in their implementations.</t>
    </section>

	</middle>

	<back>
	<references title="Normative References">
	  &RFC3279;
	  &RFC4055;
      &RFC5480;
	  &RFC8017;
	  <!-- <reference anchor="ASN1-B"><front>
	  <title>Information technology - Abstract Syntax Notation One (ASN.1): Specification of basic notation</title>
	  <author>
	  <organization>ITU-T</organization>
	  </author>
      
	  <date year="2015"/>
	  </front>
      
	  <seriesInfo name="ITU-T" value="Recommendation X.680"/>
	  </reference> -->
	  <!-- <reference anchor="ASN1-E"><front>
	  <title>Information technology - ASN.1 encoding rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)</title>
	  <author>
	  <organization>ITU-T</organization>
	  </author>
      
	  <date year="2015"/>
	  </front>
      
	  <seriesInfo name="ITU-T" value="Recommendation X.690"/>
	  </reference> -->
	  <reference anchor="CMS"><front>
	  <title>Cryptographic Message Syntax (CMS)</title>
	  <author fullname="R. Housley" initials="R." surname="Housley">
	  </author>
      
	  <date month="September" year="2009"/>
	  </front>
      
	  <seriesInfo name="STD" value="70"/>
	  <seriesInfo name="RFC" value="5652"/>
	  </reference>
	  <reference anchor="DSS"><front>
	  <title>Digital Signature Standard, version 4</title>
	  <author>
	  <organization>National Institute of Standards and Technology, U.S. Department of Commerce</organization>
	  </author>
      
	  <date year="2013"/>
	  </front>
      
	  <seriesInfo name="NIST" value="FIPS PUB 186-4"/>
	  </reference>
	  <!-- <reference anchor="HMAC"><front>
	  <title>HMAC: Keyed-Hashing for Message Authentication</title>
	  <author fullname="H. Krawczyk" initials="H." surname="Krawczyk">
	  </author>
      
	  <date month="February" year="1997"/>
	  </front>
      
	  <seriesInfo name="RFC" value="2104"/>
	  </reference> -->
	  <!-- <reference anchor="KEYWORDS"><front>
	  <title>Key words for use in RFCs to Indicate Requirement Levels</title>
	  <author fullname="S. Bradner" initials="S." surname="Bradner">
	  </author>
      
	  <date month="March" year="1997"/>
	  </front>
      
	  <seriesInfo name="BCP" value="14"/>
	  <seriesInfo name="RFC" value="2119"/>
	  </reference> --> 
      <!-- <reference anchor="PKIXALG"><front>
	  <title>Algorithms and Identifiers for the Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
	  <author fullname="L. Bassham" initials="L." surname="Bassham">
	  </author>
      
	  <author fullname="W. Polk" initials="W." surname="Polk">
	  </author>
      
	  <author fullname="R. Housley" initials="R." surname="Housley">
	  </author>
      
	  <date month="April" year="2002"/>
	  </front>
      
	  <seriesInfo name="RFC" value="3279"/>
	  </reference> -->
<!--  	<reference anchor="PKIXECC"><front>
	  <title>Elliptic Curve Cryptography Subject Public Key Information</title>
	  <author fullname="S. Turner" initials="S." surname="Turner">
	  </author>
      
	  <author fullname="D. Brown" initials="D." surname="Brown">
	  </author>
      
	  <author fullname="K. Yiu" initials="K." surname="Yiu">
	  </author>
      
	  <author fullname="R. Housley" initials="R." surname="Housley">
	  </author>
      
	  <author fullname="T. Polk" initials="T." surname="Polk">
	  </author>
      
	  <date month="March" year="2009"/>
	  </front>
      
	  <seriesInfo name="RFC" value="5480"/>
	  </reference> -->
	  <reference anchor="SHA3"><front>
	  <title>SHA-3 Standard - Permutation-Based Hash and Extendable-Output Functions</title>
	  <author>
	  <organization>National Institute of Standards and Technology, U.S. Department of Commerce</organization>
	  </author>
      
	  <date month="August" year="2015"/>
	  </front>
      
	  <seriesInfo name="FIPS" value="PUB 202"/>
	  </reference>
	</references>
	<references title="Informative References">
	  <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml-ids/reference.I-D.draft-ietf-lamps-pkix-shake-00.xml"?>
	  <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml-ids/reference.I-D.draft-housley-lamps-cms-sha3-hash-00.xml"?>
	  <reference anchor="RANDOM"><front>
	  <title>Randomness Requirements for Security</title>
	  <author fullname="D. Eastlake" initials="D." surname="Eastlake">
	  </author>
      
	  <author fullname="J. Schiller" initials="J." surname="Schiller">
	  </author>
      
	  <author fullname="S. Crocker" initials="S." surname="Crocker">
	  </author>
      
	  <date month="June" year="2005"/>
	  </front>
      
	  <seriesInfo name="BCP" value="106"/>
	  <seriesInfo name="RFC" value="4086"/>
	  </reference>
	</references>
	<section title="ASN.1 Module" anchor="section-a"><t>
    [EDNOTE: Update] </t>

	</section>

	</back>

</rfc>
	
